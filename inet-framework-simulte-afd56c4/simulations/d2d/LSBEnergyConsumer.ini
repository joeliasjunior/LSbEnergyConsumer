[General]
image-path=../../images
tkenv-plugin-path = ../../../inet/etc/plugins
output-scalar-file-append = false
debug-on-errors = false
tkenv-default-config = 
#sim-time-limit=5s
sim-time-limit=10s
warmup-period=0s
repeat = 3
**.routingRecorder.enabled = false

############### Statistics ##################
output-scalar-file = ${resultdir}/${configname}/${repetition}.sca
output-vector-file = ${resultdir}/${configname}/${repetition}.vec
seed-set = ${repetition}
**.vector-recording = true

################ Channel parameters #####################
**.channelControl.pMax = 10W
**.channelControl.alpha = 1.0
**.channelControl.carrierFrequency = 2100e+6Hz

################ PhyLayer parameters #####################
**.nic.phy.channelModel=xmldoc("config_channel.xml")
**.feedbackComputation = xmldoc("config_channel.xml")

################ Mobility parameters #####################
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m

################# Deployer parameters #######################
# UEs attached to eNB
**.fbDelay = 1

############### AMC MODULE PARAMETERS ###############
**.rbAllocationType = "localized"
**.deployer.numRbDl = 50
**.deployer.numRbUl = 50
**.numBands = 50

############### Base Configuration (do NOT run this) ###############
# It includes N pairs of UEs served by one eNodeB.
[Config MultiplePairs]
network=lte.simulations.networks.SingleCell_D2D

### eNodeBs configuration ###
*.eNodeB.mobility.initFromDisplayString = false
*.eNodeB.mobility.initialX = 300m
*.eNodeB.mobility.initialY = 300m

### UEs configuration ###
*.numUeCell = 0
#*.numUeD2DTx = ${numPairs=5,20,50}
*.numUeD2DTx = ${numPairs=20}
*.numUeD2DRx = ${numPairs}

*.ue*[*].macCellId = 1
*.ue*[*].masterId = 1
*.ue*[*].mobility.initFromDisplayString = false

# Place D2D endpoints far from the eNodeB (~50m) and close to each other
*.ueD2D*[*].mobility.initialX = uniform(290m,310m)
*.ueD2D*[*].mobility.initialY = uniform(340m,350m)


# ----------------------------------------------------------------------------- #
# Config "MultiplePairs-UDP-Infra"
#
# In this next two configuration, UEs run a VoIP application (using UDP as transport layer protocol)
# They communicate using the traditional infrastructure mode (two-hop path through the eNodeB)
#
[Config MultiplePairs-UDP-Infra]
extends=MultiplePairs

### Traffic configuration ###
*.ueD2D*[*].numUdpApps = 1

# Traffic between pairs of UEs (e.g. ueD2DTx[0] --> ueD2DRx[0] )
# Transmitters
*.ueD2DTx[*].udpApp[*].typename = "VoIPSender"
*.ueD2DTx[*].udpApp[*].localPort = 3088+ancestorIndex(0) 
*.ueD2DTx[*].udpApp[*].startTime = uniform(0s,0.02s)
*.ueD2DTx[*].udpApp[*].destAddress = "ueD2DRx[" + string(ancestorIndex(1)) + "]"
*.ueD2DTx[*].udpApp[*].destPort = 1000
# Receivers
*.ueD2DRx[*].udpApp[*].typename = "VoIPReceiver"
*.ueD2DRx[*].udpApp[*].localPort = 1000

# Disable D2D for the eNodeB and the UEs
*.eNodeB.d2dCapable = false
*.ueD2D*[0].d2dCapable = false
**.**.amcMode = "AUTO"


# ----------------------------------------------------------------------------- #
# Config "MultiplePairs-D2D"
# They communicate using the D2D link
#
[Config MultiplePairs-UDP-D2D]
extends=MultiplePairs-UDP-Infra

# Enable D2D for the eNodeB and the UEs involved in direct communications
*.eNodeB.d2dCapable = true
*.ueD2D*[*].d2dCapable = true
**.amcMode = "D2D"

# --- Set the D2D peering capabilities --- #
# For each D2D-capable UE, write a list of UEs (separated by blank spaces) representing the possible peering UEs. 
#Note that this relationship is unidirectional. Here, ueD2DTx[0] --> ueD2DRx[0] , ueD2DTx[1] --> ueD2DRx[1] etc.
*.ueD2DTx[*].nic.d2dPeerAddresses = "ueD2DRx[" + string(ancestorIndex(1)) + "]"

# --- Select CQI for D2D transmissions --- #
# To enable the reporting of CQIs for each D2D link, set the parameter *.eNodeB.nic.phy.enableD2DCqiReporting
# To use fixed CQI, set the parameter **.usePreconfiguredTxParams and select the desired CQI using the parameter **.d2dCqi
*.eNodeB.nic.phy.enableD2DCqiReporting = true
**.usePreconfiguredTxParams = false
**.d2dCqi = 7

# status
**.hasStatus = true

# power
#**.energyConsumerType = "LSBEnergyConsumer"
#**.energyConsumerType = "AlternatingEnergyConsumer"
#**.energyConsumer.powerConsumption = 10mW
#**.energyConsumer.consumptionInterval = 1s
#**.energyConsumer.sleepInterval = 0.5s
**.energyStorageType = "SimpleEnergyStorage"
**.energyStorage.nominalCapacity = 0.50J
**.energyStorage.nodeShutdownCapacity = 0J
**.energyStorage.nodeStartCapacity = 0.5 * this.nominalCapacity
**.energyStorage.initialCapacity = uniform(0J, this.nominalCapacity)
**.energyGeneratorType = "AlternatingEnergyGenerator"
**.energyGenerator.energySinkModule = "^.energyStorage"
**.energyGenerator.powerGeneration = 0mW #1mW
**.energyGenerator.sleepInterval = exponential(10s)
**.energyGenerator.generationInterval = exponential(10s)